{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./.modernizrrc.js","webpack:///./src/js/class.js","webpack:///./src/js/getByClassName.js","webpack:///./src/js/oauth-buttons.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","window","hadGlobal","oldGlobal","Modernizr","document","undefined","tests","ModernizrProto","_version","_config","classPrefix","enableClasses","enableJSClass","usePrefixes","_q","on","test","cb","self","this","setTimeout","addTest","fn","options","push","addAsyncTest","classes","is","obj","type","_typeof","createElementNS","createSVGRect","docElement","documentElement","isSVG","nodeName","toLowerCase","createElement","arguments","apply","prefixes","split","_prefixes","cssomPrefixes","contains","str","substr","indexOf","_cssomPrefixes","modElem","elem","mStyle","style","injectElementWithStyles","rule","callback","nodes","testnames","ret","node","docOverflow","mod","div","body","fake","getBody","parseInt","id","appendChild","styleSheet","cssText","createTextNode","background","overflow","parentNode","removeChild","offsetHeight","domToCSS","replace","m1","nativeTestProps","props","length","CSS","supports","conditionText","join","pseudo","prop","result","getComputedStyle","console","getPropertyValue","error","currentStyle","computedStyle","cssToDOM","m2","toUpperCase","unshift","domPrefixes","fnBind","that","testPropsAll","prefixed","skipValueTest","ucProp","charAt","slice","afterInit","propsLength","before","elems","shift","cleanElems","e","testProps","item","testDOMProps","testAllProps","_domPrefixes","newSyntax","oldSyntax","el","documentMode","featureNames","feature","aliasIdx","nameIdx","featureNameSplit","featureIdx","aliases","Boolean","testRunner","hasClass","className","classList","match","RegExp","addClass","add","removeClass","remove","reg","getByClassName","getElementsByClassName","search","elements","pattern","results","querySelectorAll","evaluate","iterateNext","getElementsByTagName","_class","modenizr","ready","cssfilters","log","svg"],"mappings":"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","file":"js/oauth-buttons.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/oauth-buttons.js\");\n",";(function(window){var hadGlobal='Modernizr' in window;var oldGlobal=window.Modernizr;/*!\n * modernizr v3.6.0\n * Build https://modernizr.com/download?-cssfilters-svg-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function(window, document, undefined){\n  var tests = [];\n  \n\n  /**\n   *\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.6.0',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function(name, fn, options) {\n      tests.push({name: name, fn: fn, options: options});\n    },\n\n    addAsyncTest: function(fn) {\n      tests.push({name: null, fn: fn});\n    }\n  };\n\n  \n\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  \n\n  var classes = [];\n  \n\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean}\n   */\n\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n  ;\n\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  ;\n/*!\n{\n  \"name\": \"SVG\",\n  \"property\": \"svg\",\n  \"caniuse\": \"svg\",\n  \"tags\": [\"svg\"],\n  \"authors\": [\"Erik Dahlstrom\"],\n  \"polyfills\": [\n    \"svgweb\",\n    \"raphael\",\n    \"amplesdk\",\n    \"canvg\",\n    \"svg-boilerplate\",\n    \"sie\",\n    \"dojogfx\",\n    \"fabricjs\"\n  ]\n}\n!*/\n/* DOC\nDetects support for SVG in `<embed>` or `<object>` elements.\n*/\n\n  Modernizr.addTest('svg', !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);\n\n\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n  \n\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n  \n\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n\n  /**\n   * List of property values to set for css tests. See ticket #21\n   * http://git.io/vUGl4\n   *\n   * @memberof Modernizr\n   * @name Modernizr._prefixes\n   * @optionName Modernizr._prefixes\n   * @optionProp prefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._prefixes is the internal list of prefixes that we test against\n   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\n   * an array of kebab-case vendor prefixes you can use within your code.\n   *\n   * Some common use cases include\n   *\n   * Generating all possible prefixed version of a CSS property\n   * ```js\n   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\n   *\n   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\n   * ```\n   *\n   * Generating all possible prefixed version of a CSS value\n   * ```js\n   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\n   *\n   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\n   * ```\n   */\n\n  // we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test\n  // values in feature detects to continue to work\n  var prefixes = (ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['','']);\n\n  // expose these for the plugin API. Look in the source for how to join() them against your input\n  ModernizrProto._prefixes = prefixes;\n\n  \n\n  /**\n   * If the browsers follow the spec, then they would expose vendor-specific styles as:\n   *   elem.style.WebkitBorderRadius\n   * instead of something like the following (which is technically incorrect):\n   *   elem.style.webkitBorderRadius\n\n   * WebKit ghosts their properties in lowercase but Opera & Moz do not.\n   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n   *   erik.eae.net/archives/2008/03/10/21.48.10/\n\n   * More here: github.com/Modernizr/Modernizr/issues/issue/21\n   *\n   * @access private\n   * @returns {string} The string representing the vendor-specific style properties\n   */\n\n  var omPrefixes = 'Moz O ms Webkit';\n  \n\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\n  \n\n\n  /**\n   * contains checks to see if a string contains another string\n   *\n   * @access private\n   * @function contains\n   * @param {string} str - The string we want to check for substrings\n   * @param {string} substr - The substring we want to search the first string for\n   * @returns {boolean}\n   */\n\n  function contains(str, substr) {\n    return !!~('' + str).indexOf(substr);\n  }\n\n  ;\n\n  /**\n   * Create our \"modernizr\" element that we do most feature tests on.\n   *\n   * @access private\n   */\n\n  var modElem = {\n    elem: createElement('modernizr')\n  };\n\n  // Clean up this element\n  Modernizr._q.push(function() {\n    delete modElem.elem;\n  });\n\n  \n\n  var mStyle = {\n    style: modElem.elem.style\n  };\n\n  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\n  // the front of the queue.\n  Modernizr._q.unshift(function() {\n    delete mStyle.style;\n  });\n\n  \n\n  /**\n   * getBody returns the body of a document, or an element that can stand in for\n   * the body if a real body does not exist\n   *\n   * @access private\n   * @function getBody\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n   * artificially created element that stands in for the body\n   */\n\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if (!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  ;\n\n  /**\n   * injectElementWithStyles injects an element with style element and some CSS rules\n   *\n   * @access private\n   * @function injectElementWithStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   */\n\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if (parseInt(nodes, 10)) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while (nodes--) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if (body.fake) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if (body.fake) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      // eslint-disable-next-line\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n\n  }\n\n  ;\n\n  /**\n   * domToCSS takes a camelCase string and converts it to kebab-case\n   * e.g. boxSizing -> box-sizing\n   *\n   * @access private\n   * @function domToCSS\n   * @param {string} name - String name of camelCase prop we want to convert\n   * @returns {string} The kebab-case version of the supplied name\n   */\n\n  function domToCSS(name) {\n    return name.replace(/([A-Z])/g, function(str, m1) {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  }\n  ;\n\n\n  /**\n   * wrapper around getComputedStyle, to fix issues with Firefox returning null when\n   * called inside of a hidden iframe\n   *\n   * @access private\n   * @function computedStyle\n   * @param {HTMLElement|SVGElement} - The element we want to find the computed styles of\n   * @param {string|null} [pseudoSelector]- An optional pseudo element selector (e.g. :before), of null if none\n   * @returns {CSSStyleDeclaration}\n   */\n\n  function computedStyle(elem, pseudo, prop) {\n    var result;\n\n    if ('getComputedStyle' in window) {\n      result = getComputedStyle.call(window, elem, pseudo);\n      var console = window.console;\n\n      if (result !== null) {\n        if (prop) {\n          result = result.getPropertyValue(prop);\n        }\n      } else {\n        if (console) {\n          var method = console.error ? 'error' : 'log';\n          console[method].call(console, 'getComputedStyle returning null, its possible modernizr test results are inaccurate');\n        }\n      }\n    } else {\n      result = !pseudo && elem.currentStyle && elem.currentStyle[prop];\n    }\n\n    return result;\n  }\n\n  ;\n\n  /**\n   * nativeTestProps allows for us to use native feature detection functionality if available.\n   * some prefixed form, or false, in the case of an unsupported rule\n   *\n   * @access private\n   * @function nativeTestProps\n   * @param {array} props - An array of property names\n   * @param {string} value - A string representing the value we want to check via @supports\n   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\n   */\n\n  // Accepts a list of property names and a single value\n  // Returns `undefined` if native detection not available\n  function nativeTestProps(props, value) {\n    var i = props.length;\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface\n    if ('CSS' in window && 'supports' in window.CSS) {\n      // Try every prefixed variant of the property\n      while (i--) {\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // Otherwise fall back to at-rule (for Opera 12.x)\n    else if ('CSSSupportsRule' in window) {\n      // Build a condition string for every prefixed variant\n      var conditionText = [];\n      while (i--) {\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n      }\n      conditionText = conditionText.join(' or ');\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {\n        return computedStyle(node, null, 'position') == 'absolute';\n      });\n    }\n    return undefined;\n  }\n  ;\n\n  /**\n   * cssToDOM takes a kebab-case string and converts it to camelCase\n   * e.g. box-sizing -> boxSizing\n   *\n   * @access private\n   * @function cssToDOM\n   * @param {string} name - String name of kebab-case prop we want to convert\n   * @returns {string} The camelCase version of the supplied name\n   */\n\n  function cssToDOM(name) {\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\n      return m1 + m2.toUpperCase();\n    }).replace(/^-/, '');\n  }\n  ;\n\n  // testProps is a generic CSS / DOM property test.\n\n  // In testing support for a given CSS property, it's legit to test:\n  //    `elem.style[styleName] !== undefined`\n  // If the property is supported it will return an empty string,\n  // if unsupported it will return undefined.\n\n  // We'll take advantage of this quick test and skip setting a style\n  // on our modernizr element, but instead just testing undefined vs\n  // empty string.\n\n  // Property names can be provided in either camelCase or kebab-case.\n\n  function testProps(props, prefixed, value, skipValueTest) {\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\n    // Try native detect first\n    if (!is(value, 'undefined')) {\n      var result = nativeTestProps(props, value);\n      if (!is(result, 'undefined')) {\n        return result;\n      }\n    }\n\n    // Otherwise do it properly\n    var afterInit, i, propsLength, prop, before;\n\n    // If we don't have a style element, that means we're running async or after\n    // the core tests, so we'll need to create our own elements to use\n\n    // inside of an SVG element, in certain browsers, the `style` element is only\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n    // fall back to a less used element and hope for the best.\n    // for strict XHTML browsers the hardly used samp element is used\n    var elems = ['modernizr', 'tspan', 'samp'];\n    while (!mStyle.style && elems.length) {\n      afterInit = true;\n      mStyle.modElem = createElement(elems.shift());\n      mStyle.style = mStyle.modElem.style;\n    }\n\n    // Delete the objects if we created them.\n    function cleanElems() {\n      if (afterInit) {\n        delete mStyle.style;\n        delete mStyle.modElem;\n      }\n    }\n\n    propsLength = props.length;\n    for (i = 0; i < propsLength; i++) {\n      prop = props[i];\n      before = mStyle.style[prop];\n\n      if (contains(prop, '-')) {\n        prop = cssToDOM(prop);\n      }\n\n      if (mStyle.style[prop] !== undefined) {\n\n        // If value to test has been passed in, do a set-and-check test.\n        // 0 (integer) is a valid property value, so check that `value` isn't\n        // undefined, rather than just checking it's truthy.\n        if (!skipValueTest && !is(value, 'undefined')) {\n\n          // Needs a try catch block because of old IE. This is slow, but will\n          // be avoided in most cases because `skipValueTest` will be used.\n          try {\n            mStyle.style[prop] = value;\n          } catch (e) {}\n\n          // If the property value has changed, we assume the value used is\n          // supported. If `value` is empty string, it'll fail here (because\n          // it hasn't changed), which matches how browsers have implemented\n          // CSS.supports()\n          if (mStyle.style[prop] != before) {\n            cleanElems();\n            return prefixed == 'pfx' ? prop : true;\n          }\n        }\n        // Otherwise just return true, or the property name if this is a\n        // `prefixed()` call\n        else {\n          cleanElems();\n          return prefixed == 'pfx' ? prop : true;\n        }\n      }\n    }\n    cleanElems();\n    return false;\n  }\n\n  ;\n\n  /**\n   * List of JavaScript DOM values used for tests\n   *\n   * @memberof Modernizr\n   * @name Modernizr._domPrefixes\n   * @optionName Modernizr._domPrefixes\n   * @optionProp domPrefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\n   * than kebab-case properties, all properties are their Capitalized variant\n   *\n   * ```js\n   * Modernizr._domPrefixes === [ \"Moz\", \"O\", \"ms\", \"Webkit\" ];\n   * ```\n   */\n\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\n  ModernizrProto._domPrefixes = domPrefixes;\n  \n\n  /**\n   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.\n   *\n   * @access private\n   * @function fnBind\n   * @param {function} fn - a function you want to change `this` reference to\n   * @param {object} that - the `this` you want to call the function with\n   * @returns {function} The wrapped version of the supplied function\n   */\n\n  function fnBind(fn, that) {\n    return function() {\n      return fn.apply(that, arguments);\n    };\n  }\n\n  ;\n\n  /**\n   * testDOMProps is a generic DOM property test; if a browser supports\n   *   a certain property, it won't return undefined for it.\n   *\n   * @access private\n   * @function testDOMProps\n   * @param {array.<string>} props - An array of properties to test for\n   * @param {object} obj - An object or Element you want to use to test the parameters again\n   * @param {boolean|object} elem - An Element to bind the property lookup again. Use `false` to prevent the check\n   * @returns {false|*} returns false if the prop is unsupported, otherwise the value that is supported\n   */\n  function testDOMProps(props, obj, elem) {\n    var item;\n\n    for (var i in props) {\n      if (props[i] in obj) {\n\n        // return the property name as a string\n        if (elem === false) {\n          return props[i];\n        }\n\n        item = obj[props[i]];\n\n        // let's bind a function\n        if (is(item, 'function')) {\n          // bind to obj unless overriden\n          return fnBind(item, elem || obj);\n        }\n\n        // return the unbound function or obj or value\n        return item;\n      }\n    }\n    return false;\n  }\n\n  ;\n\n  /**\n   * testPropsAll tests a list of DOM properties we want to check against.\n   * We specify literally ALL possible (known and/or likely) properties on\n   * the element including the non-vendor prefixed one, for forward-\n   * compatibility.\n   *\n   * @access private\n   * @function testPropsAll\n   * @param {string} prop - A string of the property to test for\n   * @param {string|object} [prefixed] - An object to check the prefixed properties on. Use a string to skip\n   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against\n   * @param {string} [value] - A string of a css value\n   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set\n   * @returns {false|string} returns the string version of the property, or false if it is unsupported\n   */\n  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {\n\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n      props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\n    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {\n      return testProps(props, prefixed, value, skipValueTest);\n\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n    } else {\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n      return testDOMProps(props, prefixed, elem);\n    }\n  }\n\n  // Modernizr.testAllProps() investigates whether a given style property,\n  // or any of its vendor-prefixed variants, is recognized\n  //\n  // Note that the property names must be provided in the camelCase variant.\n  // Modernizr.testAllProps('boxSizing')\n  ModernizrProto.testAllProps = testPropsAll;\n\n  \n\n  /**\n   * testAllProps determines whether a given CSS property is supported in the browser\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testAllProps\n   * @optionName Modernizr.testAllProps()\n   * @optionProp testAllProps\n   * @access public\n   * @function testAllProps\n   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)\n   * @param {string} [value] - String of the value to test\n   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection\n   * @example\n   *\n   * testAllProps determines whether a given CSS property, in some prefixed form,\n   * is supported by the browser.\n   *\n   * ```js\n   * testAllProps('boxSizing')  // true\n   * ```\n   *\n   * It can optionally be given a CSS value in string form to test if a property\n   * value is valid\n   *\n   * ```js\n   * testAllProps('display', 'block') // true\n   * testAllProps('display', 'penguin') // false\n   * ```\n   *\n   * A boolean can be passed as a third parameter to skip the value check when\n   * native detection (@supports) isn't available.\n   *\n   * ```js\n   * testAllProps('shapeOutside', 'content-box', true);\n   * ```\n   */\n\n  function testAllProps(prop, value, skipValueTest) {\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\n  }\n  ModernizrProto.testAllProps = testAllProps;\n  \n/*!\n{\n  \"name\": \"CSS Supports\",\n  \"property\": \"supports\",\n  \"caniuse\": \"css-featurequeries\",\n  \"tags\": [\"css\"],\n  \"builderAliases\": [\"css_supports\"],\n  \"notes\": [{\n    \"name\": \"W3 Spec\",\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#at-supports\"\n  },{\n    \"name\": \"Related Github Issue\",\n    \"href\": \"https://github.com/Modernizr/Modernizr/issues/648\"\n  },{\n    \"name\": \"W3 Info\",\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#the-csssupportsrule-interface\"\n  }]\n}\n!*/\n\n  var newSyntax = 'CSS' in window && 'supports' in window.CSS;\n  var oldSyntax = 'supportsCSS' in window;\n  Modernizr.addTest('supports', newSyntax || oldSyntax);\n\n/*!\n{\n  \"name\": \"CSS Filters\",\n  \"property\": \"cssfilters\",\n  \"caniuse\": \"css-filters\",\n  \"polyfills\": [\"polyfilter\"],\n  \"tags\": [\"css\"],\n  \"builderAliases\": [\"css_filters\"],\n  \"notes\": [{\n    \"name\": \"MDN article on CSS filters\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/filter\"\n  }]\n}\n!*/\n\n  Modernizr.addTest('cssfilters', function() {\n    if (Modernizr.supports) {\n      return testAllProps('filter', 'blur(2px)');\n    } else {\n      var el = createElement('a');\n      el.style.cssText = prefixes.join('filter:blur(2px); ');\n      // https://github.com/Modernizr/Modernizr/issues/615\n      // documentMode is needed for false positives in oldIE, please see issue above\n      return !!el.style.length && ((document.documentMode === undefined || document.documentMode > 9));\n    }\n  });\n\n\n\n  // Run each test\n  testRunner();\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  window.Modernizr = Modernizr;\n\n\n;\n\n})(window, document);module.exports=window.Modernizr;if(hadGlobal){window.Modernizr=oldGlobal;}else{delete window.Modernizr;}})(window);","export function hasClass(el, className) {\r\n    if (el.classList)\r\n        return el.classList.contains(className)\r\n    else\r\n        return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'))\r\n  }\r\n  \r\nexport function addClass(el, className) {\r\n    if (el.classList)\r\n        el.classList.add(className)\r\n    else if (!hasClass(el, className)) el.className += \" \" + className\r\n  }\r\n  \r\nexport function removeClass(el, className) {\r\n    if (el.classList)\r\n        el.classList.remove(className)\r\n    else if (hasClass(el, className)) {\r\n        var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)')\r\n        el.className=el.className.replace(reg, ' ')\r\n    }\r\n}\r\n// https://jaketrent.com/post/addremove-classes-raw-javascript/","export function getByClassName () {\r\n    if (!document.getElementsByClassName) {\r\n        document.getElementsByClassName = function(search) {\r\n            var d = document, elements, pattern, i, results = [];\r\n            if (d.querySelectorAll) { // IE8\r\n                return d.querySelectorAll(\".\" + search);\r\n            }\r\n            if (d.evaluate) { // IE6, IE7\r\n                pattern = \".//*[contains(concat(' ', @class, ' '), ' \" + search + \" ')]\";\r\n                elements = d.evaluate(pattern, d, null, 0, null);\r\n                while ((i = elements.iterateNext())) {\r\n                results.push(i);\r\n                }\r\n            } else {\r\n                elements = d.getElementsByTagName(\"*\");\r\n                pattern = new RegExp(\"(^|\\\\s)\" + search + \"(\\\\s|$)\");\r\n                for (i = 0; i < elements.length; i++) {\r\n                    if ( pattern.test(elements[i].className) ) {\r\n                        results.push(elements[i]);\r\n                    }\r\n                }\r\n            }\r\n            return results;\r\n        }\r\n    }\r\n}\r\n\r\n// https://stackoverflow.com/a/25054465\r\n","import { addClass } from './class'\r\nimport './getByClassName'\r\nimport * as modenizr from 'modernizr'\r\n\r\nready(() => {\r\n  // css filter detect\r\n  if (!modenizr.cssfilters) {\r\n    const el = document.getElementsByClassName('lbtn');\r\n    for(let i = 0; i < el.length; i++) {\r\n      addClass(el[i], 'white')\r\n    }\r\n    console.log('This browser does not support css filter.');\r\n  } else {\r\n    console.log('This browser supports css filter.');\r\n  }\r\n\r\n  // svg detect\r\n  if (!modenizr.svg) {\r\n    const el = document.getElementsByClassName('lbtn');\r\n    for(let i = 0; i < el.length; i++) {\r\n      addClass(el[i], 'lbtn-fallback-svg')\r\n    }\r\n    console.log('This browser does not support svg.');\r\n  } else {\r\n    console.log('This browser supports svg.');\r\n  }\r\n});"],"sourceRoot":""}